#!/usr/bin/env python3
import cbphocnet
import fargv
import string
import cherrypy
from PIL import Image
import numpy as np
from io import BytesIO
import base64
from cbdiadb import NumpyIndex


class MockServer(object):
    def __init__(self, params):
        super().__init__()
        self.phoc_chars = params.phoc_chars
        self.phoc_levels = params.phoc_levels
        embedding_size = sum(self.phoc_levels) * len(self.phoc_chars)
        self.db = NumpyIndex(
            nb_embeddings=params.nb_embeddings,embedding_size=embedding_size, nb_documents=1,metric="euclidean")
        self.db.set_random_data(pages_per_doc=params.pages_per_doc, page_width=params.page_width,
                                page_height=params.page_height,
                                min_word_height=params.min_word_height, max_word_height=params.max_word_height,
                                min_word_width=params.min_word_width, max_word_width=params.max_word_width,
                                doc_glob=params.document_glob, doc_root=params.document_root)

    def format_replies(self, responces):
        return {"rectangles": responces}

    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def searchword(self):
        print("SEARCHWORD BEGIN")
        query = cherrypy.request.json
        if "q_str" in query["query"]:
            embedding = cbphocnet.build_phoc_descriptor([query["query"]["q_str"]], params.phoc_chars, params.phoc_levels)
        elif "q_img" in query["query"]:
            embedding = cbphocnet.build_phoc_descriptor(["hello"], params.phoc_chars, params.phoc_levels)
        elif "q_ref" in query["query"]:
            embedding = cbphocnet.build_phoc_descriptor(["hello"], params.phoc_chars, params.phoc_levels)
        else:
            embedding = cbphocnet.build_phoc_descriptor(["hello"], params.phoc_chars, params.phoc_levels)
        print("SEARCH:", repr(query))
        responce_idx = self.search(embedding)
        responces = self.format_replies(responce_idx)
        print("SEARCHWORD END")
        return responces



    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def qbs(self):
        query = cherrypy.request.json
        embedding = cbphocnet.build_phoc_descriptor([query["q_str"]], params.phoc_chars, params.phoc_levels)
        ctx_docnames = query.get("doc_ids", [])
        max_occurence_per_document = query.get("rectangles_per_documnet", -1)
        max_responces = query.get("max_rectangles", 10000)
        responces = self.db.search(embedding, ctx_docnames=ctx_docnames, max_responces=max_responces, max_occurence_per_document=max_occurence_per_document)
        return {"rectangles": responces}

    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def qbe(self):
        query = cherrypy.request.json
        img=Image.open(BytesIO(base64.b64decode(query["q_img"])))
        img.save("/tmp/query.png")
        embedding = np.random.rand(1, self.db.embedding_size)
        responce_idx = self.search(embedding)
        responces = self.format_replies(responce_idx)
        return responces

    @cherrypy.expose
    @cherrypy.tools.json_in()
    def qbe_rotate(self):
        cherrypy.response.headers['Content-Type'] = 'image/png'
        query = cherrypy.request.json
        img=Image.open(BytesIO(base64.b64decode(query["q_img"])))
        img=img.rotate(45)
        byte_io = BytesIO()
        img.save(byte_io, 'PNG')
        return byte_io.getvalue()

    @cherrypy.expose
    @cherrypy.tools.json_out()
    @cherrypy.tools.json_in()
    def qbr(self):
        query = cherrypy.request.json
        embedding = np.random.rand(1, self.db.embedding_size)
        responce_idx = self.db.search(embedding)
        responces = self.format_replies(responce_idx)
        return responces

    @cherrypy.expose
    def index(self):
        return """
<html>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
<script type='text/javascript'>
function UpdateSearchWord() {
    $.ajax({
      type: 'POST',
      url: "searchword",
      contentType: "application/json",
      processData: false,
      data: $('#searchwordbox').val(),
      success: function(data) {alert(data);},
      dataType: "application/json"
    });
}
function UpdateQBS() {
    $.ajax({
      type: 'POST',
      url: "qbs",
      contentType: "application/json",
      processData: false,
      data: $('#qbsbox').val(),
      success: function(data) {alert(data);},
      dataType: "application/json"
    });
}
function UpdateQBE() {
    $.ajax({
      type: 'POST',
      url: "qbe",
      contentType: "application/json",
      processData: false,
      data: $('#qbebox').val(),
      success: function(data) {alert(data);},
      dataType: "application/json"
    });
}
function DebugQBE() {
    $.ajax({
      type: 'POST',
      url: "qbe_rotate",
      contentType: "application/json",
      processData: false,
      data: $('#qbebox').val(),
      success: function(data) {alert(data);},
      dataType: "image/png"
    });
}
function UpdateQBR() {
    $.ajax({
      type: 'POST',
      url: "qbr",
      contentType: "application/json",
      processData: false,
      data: $('#qbrbox').val(),
      success: function(data) {alert(data);},
      dataType: "application/json"
    });
}
</script>
<body>
<input type='textbox' id='searchwordbox' value='{
  "doc_ids": ["ch_00001_mesto"],
  "query":{"q_str":"hello"}
  "rectangles_per_documnet": 100,
  "max_rectangles": 20000
}
' size='50' />
<input type='submit' value='SearchWord' onClick='UpdateSearchWord(); return false' />
<hr>
<input type='textbox' id='qbsbox' value='{"q_str":"hello"}' size='20' />
<input type='submit' value='Query By String' onClick='UpdateQBS(); return false' />
<hr>
<input type='textbox' id='qbebox' value='{"q_img":"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLl
N48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw=="}' size='20' />
<input type='submit' value='Query By Example' onClick='UpdateQBE(); return false' />
<input type='submit' value='Rotate Image' onClick='DebugQBE(); return false' />
<hr>
<input type='textbox' id='qbrbox' value='{"q_ref":{"doc_id":"ch_00001_mesto",
        "page_num":11,
        "left":700,
        "top":500,
        "right":900,
        "bottom":600}}}' size='50' />
<input type='submit' value='Query By Image Reference' onClick='UpdateQBR(); return false' />
</body>
</html>
"""

if __name__=="__main__":
    params = {
        "port": 8080,
        "phoc_chars": string.ascii_lowercase + string.digits,
        "phoc_levels": [1, 2, 3, 4, 5],
        "nb_embeddings": 100000,
        "min_word_width": 50,
        "max_word_width": 300,
        "min_word_height": 40,
        "max_word_height": 150,
        "page_width": 2000,
        "page_height": 3000,
        "pages_per_doc": 10,
        "document_glob": ("./data/mirror_root/*/*/*",
                          """PYTHONPATH="./" ./bin/mock_server -document_glob '/data/archiv/public/chronicle/*/*'"""),
        "document_root": ("./data/mirror_root/",
                          """PYTHONPATH="./" ./bin/mock_server -document_root '/data/archiv/public/chronicle'""")
    }
    params, _ = fargv.fargv(params)
    cherrypy.config.update({'server.socket_port': params.port})
    cherrypy.quickstart(MockServer(params))